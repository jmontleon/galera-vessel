---
#boostrap database
- name: oc login
  shell: "oc login {{ server_url }} --token={{ token }} --insecure-skip-tls-verify=true"

- name: delete directory for bootstrap ansible-container
  file: path=/var/lib/ansible-container/galera/bootstrap/{{ namespace }} state=absent

- name: create directory for boostrap ansible-cluster_size
  file: path=/var/lib/ansible-container/galera/bootstrap/{{ namespace }} state=directory

- name: check if namespace exists
  shell: "oc get project"
  register: get_namespace_result

- name: create namespace
  shell: "oc new-project {{ namespace }}"
  when: "'{{ namespace }}' not in get_namespace_result.stdout"

- name: create pvc definitions
  template:
    src: templates/mariadb-pvc.yml
    dest: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}/mariadb{{ item }}-data.yml
  with_sequence: count={{ cluster_size }}

- name: create pvcs
  shell: "oc --token={{ token }} --server={{ server_url }} -n {{ namespace }} create -f mariadb{{ item }}-data.yml"
  args:
    chdir: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}
  with_sequence: count={{ cluster_size }}

- name: create svc definitions
  template:
    src: templates/mariadb-svc.yml
    dest: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}/mariadb{{ item }}-svc.yml
  with_sequence: count={{ cluster_size }}

- name: create services
  shell: "oc --token={{ token }} --server={{ server_url }} -n {{ namespace }} create -f mariadb{{ item }}-svc.yml"
  args:
    chdir: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}
  with_sequence: count={{ cluster_size }}

- name: create boostrap job definition
  template:
    src: templates/bootstrap-job.j2 
    dest: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}/bootstrap-job.yml

- name: create bootstrap job
  shell: "oc --token={{ token }} --server={{ server_url }} -n {{ namespace }} create -f bootstrap-job.yml"
  args:
    chdir: /var/lib/ansible-container/galera/bootstrap/{{ namespace }}

#- name: wait for boostrap to complete
#  shell: "oc --token={{ token }} --server={{ server_url }} -n {{ namespace }} get pods | grep mariadb-bootstrap"
#  register: job_result
#  until: "'Completed' in job_result.stdout"
#  retries: 24
#  delay: 5

- name: generate cluster string
  set_fact: cs: "{{ cluster_string }}+mariadb-{{ item }}"
  with_sequence: count={{ cluster_size }}

- name: "echo {{ cs }}"
  shell: "echo {{ cs }}"
